$baseline-px: 16px;
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem; // Print the first line in pixel values
  #{$property}: $px-values; // If there is only one (numeric) value, return the property/value line for it.

  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero or a string or a color, return unchanged input
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

@mixin em($property, $px-values) {
  // Convert the baseline into ems
  $baseline-em: $baseline-px / 1em; // Print the first line in pixel values
  #{$property}: $px-values; // If there is only one (numeric) value, return the property/value line for it.

  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-em;
  }
  @else {
    // Create an empty list that we can dump values into
    $em-values: unquote("");
    @each $value in $px-values {
      // If the value is zero or a string or a color, return unchanged input
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $em-values: append($em-values, $value);
      }
      @else {
        $em-values: append($em-values, $value / $baseline-em);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $em-values;
  }
}

@mixin fitToParent($margin: 0){
  position: absolute;
  top: $margin;
  right: $margin;
  bottom: $margin;
  left: $margin;
}

.fit-to-parent{
  @include fitToParent();
}

@mixin fill-height-or-more(){
  display: flex;
  flex-direction: column;

  & > * {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: auto;
  }
}
